generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Campaign {
  id        Int         @id @unique @default(autoincrement())
  name      String
  usersId   Int         @unique
  character Character[]
  master    Users       @relation(fields: [usersId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @default(now())
}

model Users {
  id        Int         @id @unique @default(autoincrement())
  nick      String      @unique
  name      String
  email     String      @unique
  phone     String
  password  String
  character Character[]
  campaigns Campaign[]
  isActive  Boolean?    @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @default(now())
}

model Character {
  id          Int       @id @unique @default(autoincrement())
  name        String
  about       Json?
  slots       Json?
  atributes   Json?
  status      Json?
  magics      magic[]
  items       item[]
  usersId     Int       @unique
  campaignsId Int       @unique
  owner       Users     @relation(fields: [usersId], references: [id])
  campaign    Campaign  @relation(fields: [campaignsId], references: [id])
  isAlive     Boolean?  @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @default(now())
}

model magic {
  id Int @id @unique @default(autoincrement())

  damage      Int
  name        String
  castingtime Int
  component   String
  description String
  duration    Int
  range       Int
  charId      Int       @unique
  char        Character @relation(fields: [charId], references: [id])
}

model item {
  id Int @id @unique @default(autoincrement())
  charId    Int       @unique
  char      Character @relation(fields: [charId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())
}
